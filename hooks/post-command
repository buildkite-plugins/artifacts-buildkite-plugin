#!/bin/bash
set -euo pipefail

if [[ "${BUILDKITE_PLUGIN_ARTIFACTS_DEBUG:-false}" =~ (true|on|1) ]] ; then
  echo "~~~ :hammer: Enabling debug mode"
  set -x
fi

while IFS='=' read -r EXIT_VAR _ ; do
  if [[ $EXIT_VAR =~ ^(BUILDKITE_PLUGIN_ARTIFACTS_SKIP_ON_STATUS(|_[0-9]+))$ ]]; then
    if [ "${BUILDKITE_COMMAND_EXIT_STATUS}" -eq "${!EXIT_VAR}" ]; then
      echo "Command exit status matches ${!EXIT_VAR}, skipping upload"
      exit 0
    fi
  fi
done < <(env | sort)

args=("upload")

if [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_JOB:-}" ]] ; then
  args+=("--job" "${BUILDKITE_PLUGIN_ARTIFACTS_JOB}")
fi

paths=()
compress=()

COMPRESSED="false"
RELOCATION="false"
SINGULAR_UPLOAD_OBJECT="false"
MULTIPLE_UPLOADS="false"

if [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD:-}" ]] || { [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD_FROM:-}" ]] && [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD_TO:-}" ]]; }; then
  SINGULAR_UPLOAD_OBJECT="true"
  if [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD:-}" ]] ; then
    paths+=("${BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD}")
  elif [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD_FROM:-}" ]] && [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD_TO:-}" ]] ; then
    RELOCATION="true"
    paths+=("${BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD_FROM}")
  fi
fi

while IFS='=' read -r path _ ; do
  if [[ $path =~ ^(BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD_[0-9]+) ]] && ! [[ $path =~ ^(BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD_[0-9]+_TO) ]]; then
    MULTIPLE_UPLOADS="true"
    paths+=("${!path}")
  fi
done < <(env | sort)

if [[ "${#paths[@]}" -le 0 ]]; then
  # no upload data
  exit 0
fi

if [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED:-}" ]]; then
  COMPRESSED="true"

  if [[ "${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}" =~ .*\.zip ]]; then
    compress+=("zip" "-r" "${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}")
  elif [[ "${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}" =~ .*\.tgz ]]; then
    compress+=("tar" "czf" "${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}")
  else
    echo "+++ ðŸš¨ The inferred compression file format for the artifact is not currently supported"
    exit 1
  fi
fi

workdir=${BUILDKITE_PLUGIN_ARTIFACTS_WORKDIR:-.}

pushd "${workdir}"
trap popd EXIT

bk_agent() {
  if ! buildkite-agent artifact "${@}"; then
    if [[ "${BUILDKITE_PLUGIN_ARTIFACTS_IGNORE_MISSING:-"false"}" != "false" ]]; then
      echo "Ignoring error in upload of" "${@: -1}"
    else
      echo "Error in upload of" "${@:-1}"
      exit 1
    fi
  fi
}

handle_relocation() {
  local index="$1"
  local var_string=""
  if [[ -n "${index}" ]]; then
    var_string="${index}_"
  fi

  source_env_var="BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD_${var_string}FROM"
  dest_env_var="BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD_${var_string}TO"

  if [[ -n "${!source_env_var:-}" ]] && [[ -n "${!dest_env_var:-}" ]]; then
    if [[ -e ${!source_env_var} ]]; then
      echo "~~~ Moving [${!source_env_var}] to [${!dest_env_var}]..."
      mv "${!source_env_var}" "${!dest_env_var}"
    elif [[ ${BUILDKITE_PLUGIN_ARTIFACTS_IGNORE_MISSING:-"false"} == "true" ]]; then
      echo "Ignoring missing file ${!source_env_var} for relocation"
    fi
  fi
}

# Set user-provided object ACL for AWS S3
if [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_S3_UPLOAD_ACL:-}" ]] ; then
  echo "~~~ Setting S3 object upload ACL: ${BUILDKITE_PLUGIN_ARTIFACTS_S3_UPLOAD_ACL}"
  export BUILDKITE_S3_ACL="${BUILDKITE_PLUGIN_ARTIFACTS_S3_UPLOAD_ACL}"
fi

# Set user-provided object ACL for Google Cloud Storage
if [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_GS_UPLOAD_ACL:-}" ]] ; then
  echo "~~~ Setting GS object upload ACL: ${BUILDKITE_PLUGIN_ARTIFACTS_GS_UPLOAD_ACL}"
  export BUILDKITE_GS_ACL="${BUILDKITE_PLUGIN_ARTIFACTS_GS_UPLOAD_ACL}"
fi

if [[ "${#args[@]}" -gt 1 ]]; then
  EXTRA_MESSAGE="(extra args: '${args[*]:1}')"
else
  EXTRA_MESSAGE=""
fi

if [[ "${SINGULAR_UPLOAD_OBJECT}" == "true" ]]; then
  if [[ "${RELOCATION}" == "true" ]]; then
    handle_relocation ""
    path="${BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD_TO}"
  else
    path="${paths[0]}"
  fi

  if [[ "${COMPRESSED}" == "true" ]]; then
    echo "~~~ Compressing ${path} to ${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}"
    if [[ ! -e "${path}" ]]; then
      echo "+++ ðŸš¨ Unable to compress artifact, '${path}' may not exist or is an empty directory"
    else
      "${compress[@]}" "${path}"
      path=" ${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}"
    fi
  fi

  echo "~~~ Uploading artifacts ${EXTRA_MESSAGE}"
  bk_agent "${args[@]}" "${path}"
elif [[ "${COMPRESSED}" == "true" ]]; then
  final_paths=()
  index=0
  for path in "${paths[@]}"; do
    handle_relocation "${index}"
    dest_env_var="BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD_${index}_TO"
    if [[ -n "${!dest_env_var:-}" ]]; then
      path="${!dest_env_var}"
    fi

    final_paths+=("$path")
    ((index+=1))
  done

  echo "~~~ Compressing ${final_paths[*]} to ${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}"
  "${compress[@]}" "${final_paths[@]}"

  echo "~~~ Uploading artifacts ${EXTRA_MESSAGE}"
  bk_agent "${args[@]}" "${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}"
elif [[ "${MULTIPLE_UPLOADS}" == "true" ]]; then
  index=0
  echo "~~~ Uploading artifacts ${EXTRA_MESSAGE}"

  for path in "${paths[@]}"; do
    handle_relocation "${index}"
    dest_env_var="BUILDKITE_PLUGIN_ARTIFACTS_UPLOAD_${index}_TO"
    if [[ -n "${!dest_env_var:-}" ]]; then
      path="${!dest_env_var}"
    fi

    bk_agent "${args[@]}" "$path"
    ((index+=1))
  done
fi
