#!/bin/bash
set -euo pipefail

if [[ "${BUILDKITE_PLUGIN_ARTIFACTS_DEBUG:-false}" =~ (true|on|1) ]] ; then
  echo "~~~ :hammer: Enabling debug mode"
  set -x
fi

step_option="${BUILDKITE_PLUGIN_ARTIFACTS_STEP:-}"
build_option="${BUILDKITE_PLUGIN_ARTIFACTS_BUILD:-}"

paths=()
compress=()

COMPRESSED="false"
SINGULAR_DOWNLOAD_OBJECT="false"
RELOCATION="false"
MULTIPLE_DOWNLOADS="false"

if [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD:-}" ]] || { [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_FROM:-}" ]] && [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_TO:-}" ]]; }; then
    SINGULAR_DOWNLOAD_OBJECT="true"
    if [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD:-}" ]] ; then
      paths+=("$BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD")
    elif [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_FROM:-}" ]] && [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_TO:-}" ]] ; then
      RELOCATION="true"
      paths+=("$BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_FROM")
    fi
fi

while IFS='=' read -r path _ ; do
  if [[ $path =~ ^(BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_[0-9]+)$ ]] || [[ $path =~ ^(BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_[0-9]+_FROM)$ ]]; then
    MULTIPLE_DOWNLOADS="true"
    paths+=("${!path}")
  fi
done < <(env | sort)

if [[ "${#paths[@]}" -le 0 ]]; then
  # no download data
  exit 0
fi

bk_agent() {
  # first two options must be step and build (but can be empty)
  step="${1}"
  shift
  build="${1}"
  shift

  options=('download')
  if [ -n "$step" ]; then
    options+=("--step" "${step}")
  fi

  if [ -n "$build" ]; then
    options+=("--build" "${build}")
  fi

  if [[ "${#options[@]}" -gt 1 ]]; then
    EXTRA_MESSAGE="(extra args: '${options[*]:1}')"
  else
    EXTRA_MESSAGE=""
  fi

  options+=("${@}")  # all the rest

  echo "~~~ Downloading artifacts ${EXTRA_MESSAGE}"
  buildkite-agent artifact "${options[@]}"
}

handle_bk_error() {
  local filename="$1"
  if [[ "${BUILDKITE_PLUGIN_ARTIFACTS_IGNORE_MISSING:-"false"}" != "false" ]]; then
    echo "Ignoring error in download of ${filename}"
  else
    echo "Error in download of ${filename}"
    exit 1
  fi
}

handle_relocation() {
  local index="$1"
  local var_string=""
  if [[ -n "${index}" ]]; then
    var_string="${index}_"
  fi

  source_env_var="BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_${var_string}FROM"
  dest_env_var="BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_${var_string}TO"
  if [[ -n "${!dest_env_var:-}" ]]; then
    if ! [[ -d $(dirname "${!dest_env_var}") ]]; then
      mkdir -p "$(dirname "${!dest_env_var}")"
    fi

    if [[ ! -e "${!source_env_var}" ]] && [[ ${BUILDKITE_PLUGIN_ARTIFACTS_IGNORE_MISSING:-"false"} != "false" ]]; then
      echo "Ignoring missing file ${!source_env_var} for relocation"
    else
      echo "~~~ Moving [${!source_env_var}] to [${!dest_env_var}]..."
      mv "${!source_env_var}" "${!dest_env_var}"
    fi
  fi
}

if [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED:-}" ]]; then
  COMPRESSED="true"
  if [[ "${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}" =~ .*\.zip ]]; then
    compress+=("unzip" "${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}")
  elif [[ "${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}" =~ .*\.tgz ]]; then
    compress+=("tar" "xzf" "${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}")
  else
    echo "+++ ðŸš¨ The inferred compression file format for the artifact is not currently supported"
    exit 1
  fi
fi

workdir="${BUILDKITE_PLUGIN_ARTIFACTS_WORKDIR:-.}"

if [[ "${COMPRESSED}" == "true" ]]; then
  if ! bk_agent "${step_option}" "${build_option}" "${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}" "${workdir}"; then
    handle_bk_error "${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}"
  else
    echo "~~~ Uncompressing ${paths[*]} from ${BUILDKITE_PLUGIN_ARTIFACTS_COMPRESSED}"
    "${compress[@]}" "${paths[@]}"

    # single relocation
    if [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_TO:-}" ]]; then
      handle_relocation ""
    fi

    # multiple relocations
    index=0
    for path in "${paths[@]}"; do
      handle_relocation "${index}"
      ((index+=1))
    done
  fi

elif [[ "${SINGULAR_DOWNLOAD_OBJECT}" == "true" ]]; then
  if [[ "${RELOCATION}" == "true" ]]; then
    source="${BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_FROM}"
  else
    source="${paths[*]}"
  fi

  if ! bk_agent "${step_option}" "${build_option}" "${source}" "${workdir}"; then
    handle_bk_error "${source}"
  else
    if [[ -n "${BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_TO:-}" ]]; then
      handle_relocation ""
    fi
  fi
elif [[ "${MULTIPLE_DOWNLOADS}" == "true" ]]; then
  index=0

  for path in "${paths[@]}"; do
    source_env_var="BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_${index}_FROM"
    dest_env_var="BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_${index}_TO"
    step_env_var="BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_${index}_STEP"
    build_env_var="BUILDKITE_PLUGIN_ARTIFACTS_DOWNLOAD_${index}_BUILD"

    # finally get the artifact to download
    if [ -n "${!source_env_var:-}" ] && [ -n "${!dest_env_var:-}" ]; then
      source="${!source_env_var}"
    else
      source="${path}"
    fi

    if ! bk_agent "${!step_env_var:-${step_option}}" "${!build_env_var:-${build_option}}" "${source}" "${workdir}"; then
      handle_bk_error "${source}"
    else
      handle_relocation "${index}"
    fi

    ((index+=1))
  done
fi
